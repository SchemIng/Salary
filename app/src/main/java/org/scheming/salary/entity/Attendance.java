package org.scheming.salary.entity;

import org.scheming.salary.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import org.scheming.salary.dao.AttendanceDao;
import org.scheming.salary.dao.SalaryItemDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ATTENDANCE".
 */
public class Attendance {

    private Long id;
    private Integer business_leave;
    private Integer sick_leave;
    private Integer late;
    private Integer leave_early;
    private Integer absenteeism;
    private Long salary_item;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AttendanceDao myDao;

    private SalaryItem attendance_salary_relation;
    private Long attendance_salary_relation__resolvedKey;


    public Attendance() {
    }

    public Attendance(Long id) {
        this.id = id;
    }

    public Attendance(Long id, Integer business_leave, Integer sick_leave, Integer late, Integer leave_early, Integer absenteeism, Long salary_item) {
        this.id = id;
        this.business_leave = business_leave;
        this.sick_leave = sick_leave;
        this.late = late;
        this.leave_early = leave_early;
        this.absenteeism = absenteeism;
        this.salary_item = salary_item;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAttendanceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getBusiness_leave() {
        return business_leave;
    }

    public void setBusiness_leave(Integer business_leave) {
        this.business_leave = business_leave;
    }

    public Integer getSick_leave() {
        return sick_leave;
    }

    public void setSick_leave(Integer sick_leave) {
        this.sick_leave = sick_leave;
    }

    public Integer getLate() {
        return late;
    }

    public void setLate(Integer late) {
        this.late = late;
    }

    public Integer getLeave_early() {
        return leave_early;
    }

    public void setLeave_early(Integer leave_early) {
        this.leave_early = leave_early;
    }

    public Integer getAbsenteeism() {
        return absenteeism;
    }

    public void setAbsenteeism(Integer absenteeism) {
        this.absenteeism = absenteeism;
    }

    public Long getSalary_item() {
        return salary_item;
    }

    public void setSalary_item(Long salary_item) {
        this.salary_item = salary_item;
    }

    /** To-one relationship, resolved on first access. */
    public SalaryItem getAttendance_salary_relation() {
        Long __key = this.salary_item;
        if (attendance_salary_relation__resolvedKey == null || !attendance_salary_relation__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SalaryItemDao targetDao = daoSession.getSalaryItemDao();
            SalaryItem attendance_salary_relationNew = targetDao.load(__key);
            synchronized (this) {
                attendance_salary_relation = attendance_salary_relationNew;
            	attendance_salary_relation__resolvedKey = __key;
            }
        }
        return attendance_salary_relation;
    }

    public void setAttendance_salary_relation(SalaryItem attendance_salary_relation) {
        synchronized (this) {
            this.attendance_salary_relation = attendance_salary_relation;
            salary_item = attendance_salary_relation == null ? null : attendance_salary_relation.getId();
            attendance_salary_relation__resolvedKey = salary_item;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
