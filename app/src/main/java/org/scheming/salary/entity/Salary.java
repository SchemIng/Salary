package org.scheming.salary.entity;

import java.util.List;
import org.scheming.salary.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import org.scheming.salary.dao.ProjectDao;
import org.scheming.salary.dao.SalaryDao;
import org.scheming.salary.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "SALARY".
 */
public class Salary {

    private Long id;
    private Integer current_month;
    private Float borrow;
    private Float cut_payment;
    private Float personal_social_security;
    private Long user;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SalaryDao myDao;

    private User salary_user_relation;
    private Long salary_user_relation__resolvedKey;

    private List<Project> projects;

    public Salary() {
    }

    public Salary(Long id) {
        this.id = id;
    }

    public Salary(Long id, Integer current_month, Float borrow, Float cut_payment, Float personal_social_security, Long user) {
        this.id = id;
        this.current_month = current_month;
        this.borrow = borrow;
        this.cut_payment = cut_payment;
        this.personal_social_security = personal_social_security;
        this.user = user;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSalaryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getCurrent_month() {
        return current_month;
    }

    public void setCurrent_month(Integer current_month) {
        this.current_month = current_month;
    }

    public Float getBorrow() {
        return borrow;
    }

    public void setBorrow(Float borrow) {
        this.borrow = borrow;
    }

    public Float getCut_payment() {
        return cut_payment;
    }

    public void setCut_payment(Float cut_payment) {
        this.cut_payment = cut_payment;
    }

    public Float getPersonal_social_security() {
        return personal_social_security;
    }

    public void setPersonal_social_security(Float personal_social_security) {
        this.personal_social_security = personal_social_security;
    }

    public Long getUser() {
        return user;
    }

    public void setUser(Long user) {
        this.user = user;
    }

    /** To-one relationship, resolved on first access. */
    public User getSalary_user_relation() {
        Long __key = this.user;
        if (salary_user_relation__resolvedKey == null || !salary_user_relation__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User salary_user_relationNew = targetDao.load(__key);
            synchronized (this) {
                salary_user_relation = salary_user_relationNew;
            	salary_user_relation__resolvedKey = __key;
            }
        }
        return salary_user_relation;
    }

    public void setSalary_user_relation(User salary_user_relation) {
        synchronized (this) {
            this.salary_user_relation = salary_user_relation;
            user = salary_user_relation == null ? null : salary_user_relation.getId();
            salary_user_relation__resolvedKey = user;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Project> getProjects() {
        if (projects == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProjectDao targetDao = daoSession.getProjectDao();
            List<Project> projectsNew = targetDao._querySalary_Projects(id);
            synchronized (this) {
                if(projects == null) {
                    projects = projectsNew;
                }
            }
        }
        return projects;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetProjects() {
        projects = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
