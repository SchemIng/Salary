package org.scheming.salary.entity;

import org.scheming.salary.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import org.scheming.salary.dao.AllowanceDao;
import org.scheming.salary.dao.SalaryItemDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ALLOWANCE".
 */
public class Allowance {

    private Long id;
    private Float social_security;
    private Float accident_insurance;
    private Float live_allowance;
    private Float other;
    private Float special;
    private Float post;
    private Long salary_item;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AllowanceDao myDao;

    private SalaryItem allowance_salary_relation;
    private Long allowance_salary_relation__resolvedKey;


    public Allowance() {
    }

    public Allowance(Long id) {
        this.id = id;
    }

    public Allowance(Long id, Float social_security, Float accident_insurance, Float live_allowance, Float other, Float special, Float post, Long salary_item) {
        this.id = id;
        this.social_security = social_security;
        this.accident_insurance = accident_insurance;
        this.live_allowance = live_allowance;
        this.other = other;
        this.special = special;
        this.post = post;
        this.salary_item = salary_item;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAllowanceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Float getSocial_security() {
        return social_security;
    }

    public void setSocial_security(Float social_security) {
        this.social_security = social_security;
    }

    public Float getAccident_insurance() {
        return accident_insurance;
    }

    public void setAccident_insurance(Float accident_insurance) {
        this.accident_insurance = accident_insurance;
    }

    public Float getLive_allowance() {
        return live_allowance;
    }

    public void setLive_allowance(Float live_allowance) {
        this.live_allowance = live_allowance;
    }

    public Float getOther() {
        return other;
    }

    public void setOther(Float other) {
        this.other = other;
    }

    public Float getSpecial() {
        return special;
    }

    public void setSpecial(Float special) {
        this.special = special;
    }

    public Float getPost() {
        return post;
    }

    public void setPost(Float post) {
        this.post = post;
    }

    public Long getSalary_item() {
        return salary_item;
    }

    public void setSalary_item(Long salary_item) {
        this.salary_item = salary_item;
    }

    /** To-one relationship, resolved on first access. */
    public SalaryItem getAllowance_salary_relation() {
        Long __key = this.salary_item;
        if (allowance_salary_relation__resolvedKey == null || !allowance_salary_relation__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SalaryItemDao targetDao = daoSession.getSalaryItemDao();
            SalaryItem allowance_salary_relationNew = targetDao.load(__key);
            synchronized (this) {
                allowance_salary_relation = allowance_salary_relationNew;
            	allowance_salary_relation__resolvedKey = __key;
            }
        }
        return allowance_salary_relation;
    }

    public void setAllowance_salary_relation(SalaryItem allowance_salary_relation) {
        synchronized (this) {
            this.allowance_salary_relation = allowance_salary_relation;
            salary_item = allowance_salary_relation == null ? null : allowance_salary_relation.getId();
            allowance_salary_relation__resolvedKey = salary_item;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
