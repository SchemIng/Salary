package org.scheming.salary.entity;

import java.util.List;
import org.scheming.salary.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import org.scheming.salary.dao.SalaryDao;
import org.scheming.salary.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "USER".
 */
public class User {

    private Long id;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private java.util.Date join_date;
    private float base_salary;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private List<Salary> salary;

    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, String name, java.util.Date join_date, float base_salary) {
        this.id = id;
        this.name = name;
        this.join_date = join_date;
        this.base_salary = base_salary;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public java.util.Date getJoin_date() {
        return join_date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setJoin_date(java.util.Date join_date) {
        this.join_date = join_date;
    }

    public float getBase_salary() {
        return base_salary;
    }

    public void setBase_salary(float base_salary) {
        this.base_salary = base_salary;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Salary> getSalary() {
        if (salary == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SalaryDao targetDao = daoSession.getSalaryDao();
            List<Salary> salaryNew = targetDao._queryUser_Salary(id);
            synchronized (this) {
                if(salary == null) {
                    salary = salaryNew;
                }
            }
        }
        return salary;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSalary() {
        salary = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
