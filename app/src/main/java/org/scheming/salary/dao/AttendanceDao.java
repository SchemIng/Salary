package org.scheming.salary.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.scheming.salary.entity.Attendance;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTENDANCE".
*/
public class AttendanceDao extends AbstractDao<Attendance, Long> {

    public static final String TABLENAME = "ATTENDANCE";

    /**
     * Properties of entity Attendance.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Business_leave = new Property(1, Integer.class, "business_leave", false, "BUSINESS_LEAVE");
        public final static Property Sick_leave = new Property(2, Integer.class, "sick_leave", false, "SICK_LEAVE");
        public final static Property Late = new Property(3, Integer.class, "late", false, "LATE");
        public final static Property Leave_early = new Property(4, Integer.class, "leave_early", false, "LEAVE_EARLY");
        public final static Property Absenteeism = new Property(5, Integer.class, "absenteeism", false, "ABSENTEEISM");
        public final static Property Salary = new Property(6, Long.class, "salary", false, "SALARY");
    };

    private Query<Attendance> salary_AttendanceQuery;

    public AttendanceDao(DaoConfig config) {
        super(config);
    }
    
    public AttendanceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTENDANCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BUSINESS_LEAVE\" INTEGER," + // 1: business_leave
                "\"SICK_LEAVE\" INTEGER," + // 2: sick_leave
                "\"LATE\" INTEGER," + // 3: late
                "\"LEAVE_EARLY\" INTEGER," + // 4: leave_early
                "\"ABSENTEEISM\" INTEGER," + // 5: absenteeism
                "\"SALARY\" INTEGER);"); // 6: salary
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTENDANCE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Attendance entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer business_leave = entity.getBusiness_leave();
        if (business_leave != null) {
            stmt.bindLong(2, business_leave);
        }
 
        Integer sick_leave = entity.getSick_leave();
        if (sick_leave != null) {
            stmt.bindLong(3, sick_leave);
        }
 
        Integer late = entity.getLate();
        if (late != null) {
            stmt.bindLong(4, late);
        }
 
        Integer leave_early = entity.getLeave_early();
        if (leave_early != null) {
            stmt.bindLong(5, leave_early);
        }
 
        Integer absenteeism = entity.getAbsenteeism();
        if (absenteeism != null) {
            stmt.bindLong(6, absenteeism);
        }
 
        Long salary = entity.getSalary();
        if (salary != null) {
            stmt.bindLong(7, salary);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Attendance readEntity(Cursor cursor, int offset) {
        Attendance entity = new Attendance( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // business_leave
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // sick_leave
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // late
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // leave_early
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // absenteeism
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // salary
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Attendance entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBusiness_leave(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSick_leave(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setLate(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setLeave_early(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAbsenteeism(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSalary(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Attendance entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Attendance entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "attendance" to-many relationship of Salary. */
    public List<Attendance> _querySalary_Attendance(Long salary) {
        synchronized (this) {
            if (salary_AttendanceQuery == null) {
                QueryBuilder<Attendance> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Salary.eq(null));
                salary_AttendanceQuery = queryBuilder.build();
            }
        }
        Query<Attendance> query = salary_AttendanceQuery.forCurrentThread();
        query.setParameter(0, salary);
        return query.list();
    }

}
