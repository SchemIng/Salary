package org.scheming.salary.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import org.scheming.salary.entity.SalaryItem;

import org.scheming.salary.entity.Allowance;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALLOWANCE".
*/
public class AllowanceDao extends AbstractDao<Allowance, Long> {

    public static final String TABLENAME = "ALLOWANCE";

    /**
     * Properties of entity Allowance.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Social_security = new Property(1, Float.class, "social_security", false, "SOCIAL_SECURITY");
        public final static Property Accident_insurance = new Property(2, Float.class, "accident_insurance", false, "ACCIDENT_INSURANCE");
        public final static Property Life_allowance = new Property(3, Float.class, "life_allowance", false, "LIFE_ALLOWANCE");
        public final static Property Other = new Property(4, Float.class, "other", false, "OTHER");
        public final static Property Special = new Property(5, Float.class, "special", false, "SPECIAL");
        public final static Property Post = new Property(6, Float.class, "post", false, "POST");
        public final static Property Salary_item = new Property(7, Long.class, "salary_item", false, "SALARY_ITEM");
    };

    private DaoSession daoSession;


    public AllowanceDao(DaoConfig config) {
        super(config);
    }
    
    public AllowanceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALLOWANCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SOCIAL_SECURITY\" REAL," + // 1: social_security
                "\"ACCIDENT_INSURANCE\" REAL," + // 2: accident_insurance
                "\"LIFE_ALLOWANCE\" REAL," + // 3: life_allowance
                "\"OTHER\" REAL," + // 4: other
                "\"SPECIAL\" REAL," + // 5: special
                "\"POST\" REAL," + // 6: post
                "\"SALARY_ITEM\" INTEGER);"); // 7: salary_item
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALLOWANCE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Allowance entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Float social_security = entity.getSocial_security();
        if (social_security != null) {
            stmt.bindDouble(2, social_security);
        }
 
        Float accident_insurance = entity.getAccident_insurance();
        if (accident_insurance != null) {
            stmt.bindDouble(3, accident_insurance);
        }
 
        Float life_allowance = entity.getLife_allowance();
        if (life_allowance != null) {
            stmt.bindDouble(4, life_allowance);
        }
 
        Float other = entity.getOther();
        if (other != null) {
            stmt.bindDouble(5, other);
        }
 
        Float special = entity.getSpecial();
        if (special != null) {
            stmt.bindDouble(6, special);
        }
 
        Float post = entity.getPost();
        if (post != null) {
            stmt.bindDouble(7, post);
        }
 
        Long salary_item = entity.getSalary_item();
        if (salary_item != null) {
            stmt.bindLong(8, salary_item);
        }
    }

    @Override
    protected void attachEntity(Allowance entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Allowance readEntity(Cursor cursor, int offset) {
        Allowance entity = new Allowance( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // social_security
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // accident_insurance
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // life_allowance
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // other
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // special
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // post
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // salary_item
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Allowance entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSocial_security(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setAccident_insurance(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setLife_allowance(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setOther(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setSpecial(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setPost(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setSalary_item(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Allowance entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Allowance entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSalaryItemDao().getAllColumns());
            builder.append(" FROM ALLOWANCE T");
            builder.append(" LEFT JOIN SALARY_ITEM T0 ON T.\"SALARY_ITEM\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Allowance loadCurrentDeep(Cursor cursor, boolean lock) {
        Allowance entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        SalaryItem allowance_salary_relation = loadCurrentOther(daoSession.getSalaryItemDao(), cursor, offset);
        entity.setAllowance_salary_relation(allowance_salary_relation);

        return entity;    
    }

    public Allowance loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Allowance> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Allowance> list = new ArrayList<Allowance>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Allowance> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Allowance> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
